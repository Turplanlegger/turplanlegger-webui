name: 🚀 Release if Version Changed

on:
  push:
    branches:
      - main
    paths:
      - package.json

jobs:
  detect-version-change:
    name: Check for new version
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.changed }}
      version: ${{ steps.versions.outputs.current }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔎 Get Versions
        id: versions
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          PREVIOUS_VERSION=$(git show HEAD~1:package.json | jq -r '.version' || echo "")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "previous=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"

      - name: 🕵️ Check if Version Changed
        id: check
        run: |
          if [ "${{ steps.versions.outputs.current }}" != "${{ steps.versions.outputs.previous }}" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "🎯 Version changing to ${{ steps.versions.outputs.current }}!"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "🛑 No version change."
          fi

  create-release:
    name: Create and publish new GitHub Release
    needs: detect-version-change
    if: needs.detect-version-change.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Python packages
        run: pip install PyJWT cryptography requests

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.RELEASE_CLIENT_SECRET }}

      - name: 🔖 Create new tag and release
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          NEW_VERSION: ${{ needs.detect-version-change.outputs.version }}
        run: |
          gh release create "$NEW_VERSION" \
            --target "main" \
            --latest \
            --title "Release $NEW_VERSION" \
            --generate-notes

  build-and-push-docker-image:
    name: 🐋 Build and publish Docker image to GitHub Packages
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      packages: write
      id-token: write
      contents: read
    env:
      REGISTRY: ghcr.io
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Downcase repository name
        run: echo "repository=${GITHUB_REPOSITORY@L}" >> ${GITHUB_ENV}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          context: git
          images: ${{ env.REGISTRY }}/${{ env.repository }}
          tags: |
            type=raw,value=latest
            type=pep440,pattern={{version}}
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
